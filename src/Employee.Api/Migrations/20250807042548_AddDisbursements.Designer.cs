// <auto-generated />
using System;
using Employee.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Employee.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807042548_AddDisbursements")]
    partial class AddDisbursements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Employee.Api.Types.Disbursement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DisbursementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disbursement_date");

                    b.Property<Guid>("PayGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("pay_group_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("PayGroupId");

                    b.ToTable("disbursements", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("employee_id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("salary");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Department")
                        .HasDatabaseName("ix_employees_department");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.PayEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("PayGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("pay_group_id");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("routing_number");

                    b.HasKey("Id");

                    b.HasIndex("PayGroupId");

                    b.ToTable("pay_entries", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.PayGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Approvers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("approvers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("pay_groups", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.Disbursement", b =>
                {
                    b.HasOne("Employee.Api.Types.PayGroup", "PayGroup")
                        .WithMany("Disbursements")
                        .HasForeignKey("PayGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayGroup");
                });

            modelBuilder.Entity("Employee.Api.Types.PayEntry", b =>
                {
                    b.HasOne("Employee.Api.Types.PayGroup", null)
                        .WithMany("PayEntries")
                        .HasForeignKey("PayGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employee.Api.Types.PayGroup", b =>
                {
                    b.Navigation("Disbursements");

                    b.Navigation("PayEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
