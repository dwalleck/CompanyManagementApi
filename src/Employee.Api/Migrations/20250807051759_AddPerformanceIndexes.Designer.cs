// <auto-generated />
using System;
using System.Collections.Generic;
using Employee.Api.Data;
using Employee.Api.Types;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Employee.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807051759_AddPerformanceIndexes")]
    partial class AddPerformanceIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Employee.Api.Types.BusinessEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<BankAccount>>("BankAccounts")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("bank_accounts");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_business_employees_email");

                    b.ToTable("business_employees", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.Disbursement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("DisbursementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disbursement_date");

                    b.Property<Guid>("PayGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("pay_group_id");

                    b.Property<Guid?>("PayGroupId1")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DisbursementDate")
                        .HasDatabaseName("ix_disbursements_disbursement_date");

                    b.HasIndex("PayGroupId")
                        .HasDatabaseName("ix_disbursements_pay_group_id");

                    b.HasIndex("PayGroupId1");

                    b.HasIndex("State")
                        .HasDatabaseName("ix_disbursements_state");

                    b.ToTable("disbursements", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("employee_id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("salary");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Department")
                        .HasDatabaseName("ix_employees_department");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.PayEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("DisbursementId")
                        .HasColumnType("uuid")
                        .HasColumnName("disbursement_id");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("PayGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("pay_group_id");

                    b.Property<Guid?>("PayGroupId1")
                        .HasColumnType("uuid");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("routing_number");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("DisbursementId")
                        .HasDatabaseName("ix_pay_entries_disbursement_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_pay_entries_employee_id");

                    b.HasIndex("PayGroupId")
                        .HasDatabaseName("ix_pay_entries_pay_group_id");

                    b.HasIndex("PayGroupId1");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_pay_entries_type");

                    b.ToTable("pay_entries", null, t =>
                        {
                            t.HasCheckConstraint("CK_PayEntry_ExclusiveParent", "(\"type\" = 0 AND \"pay_group_id\" IS NOT NULL AND \"disbursement_id\" IS NULL) OR \r\n                  (\"type\" = 1 AND \"pay_group_id\" IS NULL AND \"disbursement_id\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Employee.Api.Types.PayGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Approvers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("approvers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("pay_groups", (string)null);
                });

            modelBuilder.Entity("Employee.Api.Types.Disbursement", b =>
                {
                    b.HasOne("Employee.Api.Types.PayGroup", "PayGroup")
                        .WithMany("Disbursements")
                        .HasForeignKey("PayGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee.Api.Types.PayGroup", null)
                        .WithMany("DisbursementsReadOnly")
                        .HasForeignKey("PayGroupId1");

                    b.Navigation("PayGroup");
                });

            modelBuilder.Entity("Employee.Api.Types.PayEntry", b =>
                {
                    b.HasOne("Employee.Api.Types.Disbursement", "Disbursement")
                        .WithMany("PayEntries")
                        .HasForeignKey("DisbursementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employee.Api.Types.PayGroup", "PayGroup")
                        .WithMany("PayEntries")
                        .HasForeignKey("PayGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employee.Api.Types.PayGroup", null)
                        .WithMany("PayEntriesReadOnly")
                        .HasForeignKey("PayGroupId1");

                    b.Navigation("Disbursement");

                    b.Navigation("PayGroup");
                });

            modelBuilder.Entity("Employee.Api.Types.Disbursement", b =>
                {
                    b.Navigation("PayEntries");
                });

            modelBuilder.Entity("Employee.Api.Types.PayGroup", b =>
                {
                    b.Navigation("Disbursements");

                    b.Navigation("DisbursementsReadOnly");

                    b.Navigation("PayEntries");

                    b.Navigation("PayEntriesReadOnly");
                });
#pragma warning restore 612, 618
        }
    }
}
